name: Generate Synology DSM MD5 Checksums and Merge with pats.json (macOS)

on:
  workflow_dispatch:
    inputs:
      dsm_version:
        description: 'DSM Version (e.g., 7.3.1-86003)'
        required: true
        default: '7.3.1-86003'

jobs:
  generate-md5:
    runs-on: macos-latest

    env:
      DSM_VERSION: ${{ github.event.inputs.dsm_version }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Prepare md5list file
        run: |
          # DSM_VERSION=7.3.1-86003 -> DSM_VERSION_URL=7.3.1/86003
          DSM_VERSION_URL=$(echo "$DSM_VERSION" | sed -E 's/([0-9]+\.[0-9]+\.[0-9]+)-([0-9]+)/\1\/\2/')

          ARCHIVE_URL="https://archive.synology.com/download/Os/DSM/${DSM_VERSION}"
          echo "Fetching file list from $ARCHIVE_URL ..."
          
          # PAT 파일 목록 가져오기 -> URL 디코딩으로 정규화 -> 중복 제거 -> 상위 5개만
          curl -s "$ARCHIVE_URL" | \
            grep -oE 'DSM_[^"]+\.pat' | \
            sed 's/%2B/+/g' | \
            sort -u | \
            head -5 | \
            while read filename; do
              echo "https://global.synologydownload.com/download/DSM/release/${DSM_VERSION_URL}/$filename"
            done > md5list
          
          echo "Generated md5list with $(wc -l < md5list) files:"
          cat md5list

      - name: Run MD5 Generation Script
        run: |
          chmod +x config/generate_md5_json_macos.sh
          ./config/generate_md5_json_macos.sh
          
          echo "result.json generated:"
          cat result.json

      - name: Merge result.json with pats.json (maintaining structure)
        run: |
          DSM_VERSION="${{ env.DSM_VERSION }}"
          DSM_VERSION_DASH=$(echo "$DSM_VERSION" | sed 's/\./-/g')
          
          # pats.json 다운로드 또는 저장소에서 읽기
          if [ -f "config/pats.json" ]; then
            echo "Using local pats.json"
            PATS_JSON="config/pats.json"
          else
            echo "Downloading pats.json from repository..."
            curl -s "https://raw.githubusercontent.com/PeterSuh-Q3/redpill-load/master/config/pats.json" -o pats.json
            PATS_JSON="pats.json"
          fi
          
          # Merge 스크립트: pats.json 구조 유지하면서 merge
          cat > merge_pats.sh << 'MERGESCRIPT'
          #!/bin/bash
          
          PATS_FILE="$1"
          RESULT_FILE="$2"
          DSM_VERSION="$3"
          OUTPUT_FILE="$4"
          
          # jq를 사용하여 merge
          # result.json: { "MODEL": { "url": "...", "sum": "..." }, ... }
          # pats.json: { "MODEL": { "VERSION-KEY": { "url": "...", "sum": "..." }, ... }, ... }
          # 병합: pats.json 구조 유지하면서 result의 각 모델에 대해 VERSION 엔트리 추가
          
          jq -s '
            . as $input |
            ($input[0] // {}) as $pats |
            ($input[1] // {}) as $result |
            
            # pats.json 복사 후 result의 항목들 추가
            ($pats | to_entries | map(.)) as $pats_entries |
            ($result | to_entries | map(.)) as $result_entries |
            
            reduce $result_entries[] as $item (
              $pats;
              .[$item.key] as $existing |
              if ($existing == null) then
                # 새로운 모델 추가
                . + {
                  ($item.key): {
                    ("'$DSM_VERSION'"): {
                      "url": $item.value.url,
                      "sum": $item.value.sum
                    }
                  }
                }
              else
                # 기존 모델에 새 버전 엔트리 추가
                .[$item.key] += {
                  ("'$DSM_VERSION'"): {
                    "url": $item.value.url,
                    "sum": $item.value.sum
                  }
                }
              end
            )
          ' "$PATS_FILE" "$RESULT_FILE" > "$OUTPUT_FILE"
          
          MERGESCRIPT
          
          chmod +x merge_pats.sh
          ./merge_pats.sh "$PATS_JSON" result.json "$DSM_VERSION" "pats_${DSM_VERSION_DASH}.json"
          
          echo "Merged JSON generated:"
          jq . "pats_${DSM_VERSION_DASH}.json" | head -80

      - name: Validate merged JSON
        run: |
          DSM_VERSION_DASH=$(echo "$DSM_VERSION" | sed 's/\./-/g')
          jq empty "pats_${DSM_VERSION_DASH}.json"
          echo "pats_${DSM_VERSION_DASH}.json validated successfully"
          
          # 구조 확인
          echo ""
          echo "=== Merged JSON Structure Sample ==="
          jq 'keys | .[0:3]' "pats_${DSM_VERSION_DASH}.json"
          echo ""
          echo "Sample model data:"
          FIRST_MODEL=$(jq -r 'keys[0]' "pats_${DSM_VERSION_DASH}.json")
          jq ".\"${FIRST_MODEL}\"" "pats_${DSM_VERSION_DASH}.json"

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dsm-md5-merged-${{ env.DSM_VERSION }}
          path: |
            result.json
            md5list
            pats_*.json

      - name: Commit and push results
        if: github.event_name == 'workflow_dispatch'
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          
          DSM_VERSION_DASH=$(echo "$DSM_VERSION" | sed 's/\./-/g')
          OUTPUT_FILE="pats_${DSM_VERSION_DASH}.json"
          
          # config 디렉토리에 저장
          cp "$OUTPUT_FILE" config/pats_${DSM_VERSION_DASH}.json
          
          git add "config/pats_${DSM_VERSION_DASH}.json"
          git commit -m "Add pats.json for DSM ${{ env.DSM_VERSION }}" || echo "No changes to commit"
          git push

      - name: Create summary
        if: always()
        run: |
          DSM_VERSION_DASH=$(echo "$DSM_VERSION" | sed 's/\./-/g')
          OUTPUT_FILE="pats_${DSM_VERSION_DASH}.json"
          
          echo "## Synology DSM MD5 Generation & Merge Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**DSM Version:** ${{ env.DSM_VERSION }}" >> $GITHUB_STEP_SUMMARY
          echo "**Output File:** \`$OUTPUT_FILE\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ -f "$OUTPUT_FILE" ]; then
            echo "### Merged pats.json Preview" >> $GITHUB_STEP_SUMMARY
            echo '```json' >> $GITHUB_STEP_SUMMARY
            jq 'to_entries | .[0:2] | from_entries' "$OUTPUT_FILE" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            
            # 통계
            MODEL_COUNT=$(jq 'keys | length' "$OUTPUT_FILE")
            TOTAL_VERSIONS=0
            for model in $(jq -r 'keys[]' "$OUTPUT_FILE"); do
              VERSION_COUNT=$(jq ".\"${model}\" | keys | length" "$OUTPUT_FILE")
              TOTAL_VERSIONS=$((TOTAL_VERSIONS + VERSION_COUNT))
            done
            
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Total Models:** $MODEL_COUNT" >> $GITHUB_STEP_SUMMARY
            echo "**Total Version Entries:** $TOTAL_VERSIONS" >> $GITHUB_STEP_SUMMARY
          fi
