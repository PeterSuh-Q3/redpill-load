name: Generate and Merge Synology DSM MD5 (macOS)

on:
  workflow_dispatch:
    inputs:
      pre_dsm_version:
        description: 'DSM Version (e.g., 7.3.0-81180)'
        required: true
        default: '7.3.0-81180'
      dsm_version:
        description: 'DSM Version (e.g., 7.3.1-86003)'
        required: true
        default: '7.3.1-86003'

jobs:
  generate-md5:
    runs-on: macos-latest
    env:
      DSM_VERSION: ${{ github.event.inputs.dsm_version }}
      PRE_DSM_VERSION: ${{ github.event.inputs.pre_dsm_version }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install tools
        run: |
          brew update
          brew install jq gawk

      - name: Prepare md5list file
        run: |
          # DSM_VERSION=7.3.1-86003 -> DSM_VERSION_URL=7.3.1/86003
          DSM_VERSION_URL=$(echo "$DSM_VERSION" | sed -E 's/([0-9]+\.[0-9]+\.[0-9]+)-([0-9]+)/\1\/\2/')
      
          ARCHIVE_URL="https://archive.synology.com/download/Os/DSM/${DSM_VERSION}"
          echo "Fetching file list from $ARCHIVE_URL ..."
          
          # PAT 파일 목록 가져오기 -> URL 디코딩으로 정규화 -> 중복 제거 -> 상위 5개만
          curl -s "$ARCHIVE_URL" | \
            grep -oE 'DSM_[^"]+\.pat' | \
            sed 's/%2B/+/g' | \
            sort -u | \
            head -5 | \
            while read filename; do
              echo "https://global.synologydownload.com/download/DSM/release/${DSM_VERSION_URL}/$filename"
            done > md5list
          
          echo "Generated md5list with $(wc -l < md5list) files:"
          cat md5list
          
      - name: Run MD5 Generation Script
        run: |
          echo "Running generate_md5_json_macos.sh..."
          chmod +x config/generate_md5_json_macos.sh
          ./config/generate_md5_json_macos.sh
          if [ ! -f "result.json" ]; then
            echo "❌ ERROR: result.json not generated"
            exit 1
          fi
          echo "✓ result.json generated"
          echo ""
          echo "=== DEBUG: result.json Content ==="
          cat result.json
          echo ""
          echo "=== DEBUG: result.json Structure ==="
          jq 'keys' result.json

      - name: Merge result.json with pats.json (maintaining structure)
        run: |
          set -euo pipefail
          set -x
          DSM_VERSION="${{ env.DSM_VERSION }}"
          DSM_VERSION_KEY="${DSM_VERSION}-0"
          echo "DSM_VERSION: ${DSM_VERSION}"
          echo "DSM_VERSION_KEY: ${DSM_VERSION_KEY}"
          if [ -f "config/pats_${PRE_DSM_VERSION}.json" ]; then
            echo "✓ Using local pats.json"
            PATS_JSON="config/pats_${PRE_DSM_VERSION}.json"
          else
            echo "⚠️  Downloading pats.json from repository..."
            curl -s "https://raw.githubusercontent.com/PeterSuh-Q3/redpill-load/master/config/pats_${PRE_DSM_VERSION}.json" -o pats.json
            PATS_JSON="pats.json"
          fi
          echo ""
          echo "=== DEBUG: Before Merge ==="
          echo "PATS_JSON file size: $(wc -c < "$PATS_JSON") bytes"
          echo "result.json file size: $(wc -c < result.json) bytes"
          chmod +x config/merge_pats.sh
          echo ""
          echo "=== DEBUG: Running merge script ==="
          DEBUG=1 config/merge_pats.sh "$PATS_JSON" result.json "$DSM_VERSION_KEY" "pats_${DSM_VERSION_KEY}.json" 2>&1 | tee "merge_pats_${DSM_VERSION_KEY}.log"
          if [ ! -f "pats_${DSM_VERSION_KEY}.json" ]; then
            echo "❌ ERROR: Merge output file not created"
            exit 1
          fi
          echo ""
          echo "✓ Merge completed"
          echo "=== DEBUG: Merged JSON Preview ==="
          jq 'keys | .[0:3]' "pats_${DSM_VERSION_KEY}.json"
          FIRST_MODEL=$(jq -r 'keys[0]' "pats_${DSM_VERSION_KEY}.json")
          echo ""
          echo "First model: $FIRST_MODEL"
          echo "Version order (should have $DSM_VERSION_KEY at top):"
          jq ".\"${FIRST_MODEL}\" | keys | .[0:5]" "pats_${DSM_VERSION_KEY}.json"

      - name: Upload merge log artifact
        uses: actions/upload-artifact@v4
        with:
          name: merge-logs-${{ env.DSM_VERSION }}
          path: merge_pats_*.log
          retention-days: 30

      - name: Validate merged JSON
        run: |
          set -euo pipefail
          DSM_VERSION="${{ env.DSM_VERSION }}"
          DSM_VERSION_KEY="${DSM_VERSION}-0"
          OUTPUT_FILE="pats_${DSM_VERSION_KEY}.json"
          echo "=== Validating $OUTPUT_FILE ==="
          if ! jq empty "$OUTPUT_FILE"; then
            echo "❌ ERROR: Invalid JSON"
            exit 1
          fi
          echo "✓ JSON is valid"
          echo ""
          echo "=== Structure Validation ==="
          MODEL_COUNT=$(jq 'keys | length' "$OUTPUT_FILE")
          echo "Total models: $MODEL_COUNT"
          SAMPLE_MODEL=$(jq -r 'keys[0]' "$OUTPUT_FILE")
          VERSION_COUNT=$(jq ".\"${SAMPLE_MODEL}\" | keys | length" "$OUTPUT_FILE")
          echo "Sample model (${SAMPLE_MODEL}) has $VERSION_COUNT versions"
          if jq ".\"${SAMPLE_MODEL}\" | keys[0] | contains(\"${DSM_VERSION_KEY}\")" "$OUTPUT_FILE" >/dev/null 2>&1; then
            echo "✓ New version added at top: ${DSM_VERSION_KEY}"
          else
            echo "⚠️ WARNING: New version might not be at top"
            echo "Top version: $(jq -r ".\"${SAMPLE_MODEL}\" | keys[0]" "$OUTPUT_FILE")"
          fi

      - name: Commit and push results
        if: github.event_name == 'workflow_dispatch'
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          DSM_VERSION="${{ env.DSM_VERSION }}"
          DSM_VERSION_KEY="${DSM_VERSION}-0"
          OUTPUT_FILE="pats_${DSM_VERSION_KEY}.json"
          cp "$OUTPUT_FILE" config/pats_${DSM_VERSION_KEY}.json
          git add "config/pats_${DSM_VERSION_KEY}.json"
          git commit -m "Add pats.json for DSM ${DSM_VERSION_KEY}" || echo "No changes to commit"
          git push

      - name: Create summary
        if: always()
        run: |
          DSM_VERSION="${{ env.DSM_VERSION }}"
          DSM_VERSION_KEY="${DSM_VERSION}-0"
          OUTPUT_FILE="pats_${DSM_VERSION_KEY}.json"
          echo "## Synology DSM MD5 Generation & Merge Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**DSM Version:** ${DSM_VERSION_KEY}" >> $GITHUB_STEP_SUMMARY
          echo "**Output File:** \`${OUTPUT_FILE}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          if [ -f "$OUTPUT_FILE" ]; then
            echo "✓ Merge successful!" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### Merged pats.json Preview" >> $GITHUB_STEP_SUMMARY
            echo '```json' >> $GITHUB_STEP_SUMMARY
            jq 'to_entries | .[0:2] | from_entries' "$OUTPUT_FILE" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            MODEL_COUNT=$(jq 'keys | length' "$OUTPUT_FILE")
            TOTAL_VERSIONS=0
            for model in $(jq -r 'keys[]' "$OUTPUT_FILE" | head -5); do
              VERSION_COUNT=$(jq ".\"${model}\" | keys | length" "$OUTPUT_FILE")
              TOTAL_VERSIONS=$((TOTAL_VERSIONS + VERSION_COUNT))
            done
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Total Models:** $MODEL_COUNT" >> $GITHUB_STEP_SUMMARY
            echo "**Sample: Total Version Entries:** $TOTAL_VERSIONS" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Merge failed - output file not found" >> $GITHUB_STEP_SUMMARY
          fi
