name: Make kernel bs patch for 7.2.1-69057-0 formal using fb kpatch

on:
  workflow_dispatch:
    inputs:
      toolchain:
        description: 'DSM toolchain URL for repack zImage'
        required: true
        default: 'https://sourceforge.net/projects/toolchain-me/files/toolchain%207.2%20beta/broadwellnk-gcc1220_glibc236_x86_64-GPL.txz/download'
      linux-src:
        description: 'Linux kernel source URL for repack zImage'
        required: true
        default: 'https://cdn.kernel.org/pub/linux/kernel/v4.x/linux-4.4.302.tar.xz'

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      #- uses: actions/checkout@v2
      - name: Bulid
        id: bulid-bsp
        env:
            ACTIONS_STEP_DEBUG: true
        run: |
          # install bsdiff
          sudo apt-get install -y bsdiff cpio xz-utils

          #ls -al $GITHUB_WORKSPACE/
          mkdir /opt/build
          mkdir /opt/dist
          cd /opt/build
          curl -kL ${{github.event.inputs.toolchain}} -o toolchain.txz
          curl -kL ${{github.event.inputs.linux-src}} -o linux.tar.xz

          # download old pat for syno_extract_system_patch # thanks for jumkey's idea.
          curl -kL https://global.download.synology.com/download/DSM/release/7.0.1/42218/DSM_DS3622xs%2B_42218.pat --output oldpat.tar.gz

          curl -kLO https://github.com/PeterSuh-Q3/redpill-load/raw/master/config/models.72
          for file in `cat models.72`
          do
          cd /opt/build
          [ ! -d synoesp ] && mkdir synoesp

          echo "Working on $file"
          URL="https://global.synologydownload.com/download/DSM/release/7.2.1/69057/DSM_${file}_69057.pat"
          URL="$(echo ${URL} | sed 's/+/%2B/g')"
          echo ${URL}
          
          curl -kL ${URL} -o ds.pat
          #patfile=$(basename ${URL} | while read; do echo -e ${REPLY//%/\\x}; done)
          #echo "::set-output name=patfile::$patfile"

          tar -C./synoesp/ -xf oldpat.tar.gz rd.gz
          cd synoesp
          xz -dc < rd.gz >rd 2>/dev/null || echo "extract rd.gz"
          echo "finish"
          cpio -idm <rd 2>&1 || echo "extract rd"
          [ ! -d extract ] && mkdir extract && cd extract
          cp ../usr/lib/libcurl.so.4 ../usr/lib/libmbedcrypto.so.5 ../usr/lib/libmbedtls.so.13 ../usr/lib/libmbedx509.so.1 ../usr/lib/libmsgpackc.so.2 ../usr/lib/libsodium.so ../usr/lib/libsynocodesign-ng-virtual-junior-wins.so.7 ../usr/syno/bin/scemd ./
          ln -s scemd syno_extract_system_patch
          cd ../..
          [ ! -d pat ] && mkdir pat
          #tar xf ds.pat -C pat
          ls -lh ./
          sudo LD_LIBRARY_PATH=synoesp/extract synoesp/extract/syno_extract_system_patch ds.pat pat || echo "extract latest pat"
          echo "test4"
          # is update_pack
          if [ ! -f "pat/zImage" ]; then
            cd pat
            ar x $(ls flashupdate*)
            tar xf data.tar.xz
            cd ..
          fi
          echo "test5"
          [ ! -d toolchain ] && mkdir toolchain
          tar xf toolchain.txz -C toolchain
          [ ! -d linux-src ] && mkdir linux-src
          tar xf linux.tar.xz --strip-components 1 -C linux-src

          # extract vmlinux
          ./linux-src/scripts/extract-vmlinux pat/zImage > vmlinux
          # sha256
          sha256sum /opt/build/ds.pat | awk '{print $1}' | awk '{print $1 "  '${file}' os.sha256"}' >> /opt/dist/files-chksum
          sha256sum /opt/build/pat/zImage | awk '{print $1}' | awk '{print $1 "  '${file}' files.zlinux.sha256"}' >> /opt/dist/files-chksum
          sha256sum /opt/build/pat/rd.gz | awk '{print $1}' | awk '{print $1 "  '${file}' files.ramdisk.sha256"}' >> /opt/dist/files-chksum
          sha256sum /opt/build/vmlinux | awk '{print $1}' | awk '{print $1 "  '${file}' files.vmlinux.sha256"}' >> /opt/dist/files-chksum
          echo "" >> /opt/dist/files-chksum
          echo "" >> /opt/dist/files-chksum

          # md5
          md5sum /opt/build/ds.pat | awk '{print $1}' | awk '{print $1 "  '${file}' os.md5"}' >> /opt/dist/md5-chksum
          echo "" >> /opt/dist/md5-chksum

          # patch vmlinux
          # vmlinux_mod.bin
          # New fabio patching method 
          echo "Patching Kernel"
          curl -kL https://github.com/pocopico/tinycore-redpill/raw/main/tools/bzImage-to-vmlinux.sh -o bzImage-to-vmlinux.sh
          curl -kL https://github.com/pocopico/tinycore-redpill/raw/main/tools/kpatch -o kpatch
          curl -kL https://github.com/pocopico/tinycore-redpill/raw/main/tools/vmlinux-to-bzImage.sh -o vmlinux-to-bzImage.sh

          chmod +x kpatch 
          ./kpatch vmlinux vmlinux_mod.bin
          #vmlinux-to-bzImage.sh vmlinux-mod bzImage

          git clone https://github.com/kiler129/recreate-zImage.git
          chmod +x recreate-zImage/rebuild_kernel.sh
          cd linux-src
          # ---------- make zImage_mod
          # Make file more anonymous
          export KBUILD_BUILD_TIMESTAMP="1970/1/1 00:00:00"
          export KBUILD_BUILD_USER="root"
          export KBUILD_BUILD_HOST="localhost"
          export KBUILD_BUILD_VERSION=0

          export ARCH=x86_64
          export CROSS_COMPILE=/opt/build/toolchain/x86_64-pc-linux-gnu/bin/x86_64-pc-linux-gnu-
          #make olddefconfig
          make defconfig
          # change to lzma
          sed -i 's/CONFIG_KERNEL_GZIP=y/# CONFIG_KERNEL_GZIP is not set/' .config
          sed -i 's/# CONFIG_KERNEL_LZMA is not set/CONFIG_KERNEL_LZMA=y/' .config
          << see_below
          make clean
          sed -i 's/bzImage: vmlinux/bzImage: /' arch/x86/Makefile
          make vmlinux -j4 || true # make some *.o inspire by UnknowO
          cp ../vmlinux_mod.bin vmlinux # vmlinux_mod.bin is already stripped of debugging and comments, strippe again should be ok
          make bzImage
          sed -i 's/bzImage: /bzImage: vmlinux/' arch/x86/Makefile
          cp arch/x86/boot/bzImage ../zImage_mod
          make clean
          see_below
          # for DS3615xs
          #sed -i 's/   -std=gnu89$/   -std=gnu89 $(call cc-option,-fno-PIE)/' Makefile
          sed -i 's/ ld -/ ${CROSS_COMPILE}ld -/' ../recreate-zImage/rebuild_kernel.sh
          sed -i 's/(ld -/(${CROSS_COMPILE}ld -/' ../recreate-zImage/rebuild_kernel.sh
          sed -i 's/ gcc / ${CROSS_COMPILE}gcc /' ../recreate-zImage/rebuild_kernel.sh
          sed -i 's/ nm / ${CROSS_COMPILE}nm /' ../recreate-zImage/rebuild_kernel.sh
          sed -i 's/ objcopy / ${CROSS_COMPILE}objcopy /' ../recreate-zImage/rebuild_kernel.sh
          sed -i 's/(objdump /(${CROSS_COMPILE}objdump /' ../recreate-zImage/rebuild_kernel.sh
          sed -i 's/ readelf / ${CROSS_COMPILE}readelf /' ../recreate-zImage/rebuild_kernel.sh
          ../recreate-zImage/rebuild_kernel.sh $PWD/../linux-src ../vmlinux_mod.bin ../zImage_mod
          # ----------
          cd ..
          bsdiff pat/zImage zImage_mod diff.bsp

          echo '---copy file---'
          cp -v diff.bsp /opt/dist/zImage-001-${file}-69057-ramdisk-and-flag-NOP.bsp
          cp -v /opt/build/pat/zImage /opt/dist/zImage.${file}
          cp -v /opt/build/pat/rd.gz  /opt/dist/rd.gz.${file}
          echo '---END---'

          ls -l
          echo 'Clean Directory!!!!!!!!!!!!!'
          sudo find /opt/build/linux-src -delete
          sudo find /opt/build/pat -delete
          sudo find /opt/build/recreate-zImage -delete
          sudo find /opt/build/synoesp -delete
          sudo find /opt/build/toolchain -delete
          ls -l
          
          done

      - name: Upload
        uses: actions/upload-artifact@v2
        with:
          name: kernel-bs-fb-patch-for-all
          path: /opt/dist
